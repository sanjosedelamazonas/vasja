package org.sanjose.web.layout;

import org.sanjose.web.helper.OperacionesTable;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

public class OperacionComponent extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Panel operacionesPanel = null;
	@AutoGenerated
	private VerticalLayout operacionesLayout;
	@AutoGenerated
	private OperacionesTable operacionesTable = new OperacionesTable();
	
	private OperacionFilterLayout opFilterLayout = new OperacionFilterLayout();
	@AutoGenerated
	private HorizontalLayout horizontalLayoutTop;
	@AutoGenerated
	private Button cargoButton = new Button("Cargo");
	@AutoGenerated
	private Button abonoButton = new Button("Abono");
	@AutoGenerated
	private Button reporteButton = new Button("Reporte");
	@AutoGenerated
	private Button regularExportButton = new Button("Exportar");
	@AutoGenerated
	private Label cuentaLabel;	
	@AutoGenerated
	private Label solesLabel; 
	@AutoGenerated
	private Label dolaresLabel; 
	@AutoGenerated
	private ComboBox categorias = new ComboBox();
	@AutoGenerated
	private ComboBox cuentas = new ComboBox();
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	public VerticalLayout getMainLayout() {
		return mainLayout;
	}

	public void setMainLayout(VerticalLayout mainLayout) {
		this.mainLayout = mainLayout;
	}

	public Panel getOperacionesPanel() {
		return operacionesPanel;
	}

	public VerticalLayout getOperacionesLayout() {
		return operacionesLayout;
	}

	public void setOperacionesLayout(VerticalLayout operacionesLayout) {
		this.operacionesLayout = operacionesLayout;
	}

	public OperacionesTable getOperacionesTable() {
		return operacionesTable;
	}

	public OperacionFilterLayout getOpFilterLayout() {
		return opFilterLayout;
	}

	public void setOpFilterLayout(OperacionFilterLayout opFilterLayout) {
		this.opFilterLayout = opFilterLayout;
	}

	public void drawOperacionesTable() {
		if (horizontalLayoutTop.getComponentIndex(cargoButton)==-1) {
			horizontalLayoutTop.addComponent(cargoButton);
			horizontalLayoutTop.setComponentAlignment(cargoButton,Alignment.MIDDLE_RIGHT);		
		}
		if (horizontalLayoutTop.getComponentIndex(abonoButton)==-1) {
			horizontalLayoutTop.addComponent(abonoButton);
			horizontalLayoutTop.setComponentAlignment(abonoButton,Alignment.MIDDLE_RIGHT);
		}
		if (horizontalLayoutTop.getComponentIndex(reporteButton)==-1) {
			horizontalLayoutTop.addComponent(reporteButton);
			horizontalLayoutTop.setComponentAlignment(reporteButton,Alignment.MIDDLE_RIGHT);
		}	
		if (horizontalLayoutTop.getComponentIndex(regularExportButton)==-1) {
			horizontalLayoutTop.addComponent(regularExportButton);
			horizontalLayoutTop.setComponentAlignment(regularExportButton,Alignment.MIDDLE_RIGHT);
		}		
		if (operacionesPanel==null) {
			operacionesPanel = buildOperacionesPanel();
			mainLayout.addComponent(operacionesPanel);
			mainLayout.setExpandRatio(operacionesPanel, 1.0f);
			mainLayout.setComponentAlignment(operacionesPanel, Alignment.MIDDLE_CENTER);
		}
	}

	public Button getRegularExportButton() {
		return regularExportButton;
	}

	public HorizontalLayout getHorizontalLayoutTop() {
		return horizontalLayoutTop;
	}

	public void setHorizontalLayoutTop(HorizontalLayout horizontalLayoutTop) {
		this.horizontalLayoutTop = horizontalLayoutTop;
		horizontalLayoutTop.requestRepaint();
	}

	public Label getCuentaLabel() {
		return cuentaLabel;
	}

	public Label getSolesLabel() {
		return solesLabel;
	}

	public void setSolesLabel(Label solesLabel) {
		this.solesLabel = solesLabel;
	}

	public Label getDolaresLabel() {
		return dolaresLabel;
	}

	public void setDolaresLabel(Label dolaresLabel) {
		this.dolaresLabel = dolaresLabel;
	}

	public void setCuentaLabel(Label cuentaLabel) {
		this.cuentaLabel = cuentaLabel;
		//((Label)horizontalLayoutTop.getComponent(horizontalLayoutTop.getComponentIndex(cuentaLabel))).setValue(cuentaLabelText);
	}

	public ComboBox getCategorias() {
		return categorias;
	}

	public void setCategorias(ComboBox categorias) {
		this.categorias = categorias;
	}

	public ComboBox getCuentas() {
		return cuentas;
	}

	public void setCuentas(ComboBox cuentas) {
		this.cuentas = cuentas;
		// horizontalLayoutTop
		horizontalLayoutTop = buildHorizontalLayoutTop();
		mainLayout.addComponent(horizontalLayoutTop);
		mainLayout
				.setComponentAlignment(horizontalLayoutTop, new Alignment(20));
	}

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	public Button getCargoButton() {
		return cargoButton;
	}

	public Button getReporteButton() {
		return reporteButton;
	}

	public void setReporteButton(Button reporteButton) {
		this.reporteButton = reporteButton;
	}

	public void setCargoButton(Button cargoButton) {
		this.cargoButton = cargoButton;
	}

	public Button getAbonoButton() {
		return abonoButton;
	}

	public void setAbonoButton(Button abonoButton) {
		this.abonoButton = abonoButton;
	}

	public void setOperacionesPanel(Panel operacionesPanel) {
		this.operacionesPanel = operacionesPanel;
	}

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public OperacionComponent() {
		//setHeight("100%");
		setSizeFull();
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		// TODO add user code here
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		//mainLayout.setHeight("100%");
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setSizeFull();
		//setHeight("100%");
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutTop() {
		// common part: create layout
		horizontalLayoutTop = new HorizontalLayout();
		horizontalLayoutTop.setImmediate(false);
		horizontalLayoutTop.setWidth("100.0%");
		horizontalLayoutTop.setHeight("-1px");
		horizontalLayoutTop.setMargin(true);
		horizontalLayoutTop.setSpacing(true);
		
		// categorias
		categorias.setImmediate(true);
		categorias.setWidth("-1px");
		categorias.setHeight("-1px");
		horizontalLayoutTop.addComponent(categorias);
		horizontalLayoutTop.setComponentAlignment(categorias, Alignment.MIDDLE_LEFT);

		// cuentas
		cuentas.setImmediate(true);
		cuentas.setWidth("-1px");
		cuentas.setHeight("-1px");
		horizontalLayoutTop.addComponent(cuentas);
		horizontalLayoutTop.setComponentAlignment(cuentas, Alignment.MIDDLE_LEFT);
		
		// cuentaLabel
		cuentaLabel = new Label();
		cuentaLabel.setImmediate(false);
		cuentaLabel.setWidth("100.0%");
		cuentaLabel.setHeight("-1px");
		cuentaLabel.setValue("Seleccione la cuenta");
		
		// solesLabel 
		solesLabel = new Label();
		solesLabel.setImmediate(false);
		solesLabel.setWidth("100.0%");
		solesLabel.setHeight("-1px");
				
		dolaresLabel = new Label();
		dolaresLabel.setImmediate(false);
		dolaresLabel.setWidth("100.0%");
		dolaresLabel.setHeight("-1px");

		horizontalLayoutTop.addComponent(cuentaLabel);
		horizontalLayoutTop.setExpandRatio(cuentaLabel, 1.0f);
		horizontalLayoutTop.addComponent(solesLabel);
		horizontalLayoutTop.addComponent(dolaresLabel);
		horizontalLayoutTop.setComponentAlignment(cuentaLabel, Alignment.MIDDLE_CENTER);
		
		// buttonsRightTop
		
		//cargoButton.setWidth("-1px");
		//cargoButton.setHeight("-1px");
		
		return horizontalLayoutTop;
	}

	@AutoGenerated
	private Panel buildOperacionesPanel() {
		// common part: create layout
		operacionesPanel = new Panel();
		operacionesPanel.setImmediate(false);
		operacionesPanel.setWidth("100.0%");
		operacionesPanel.setHeight("100.0%");
		operacionesPanel.setScrollable(true);
		
		// operacionesLayout
		operacionesLayout = buildOperacionesLayout();
		operacionesPanel.setContent(operacionesLayout);
		
		return operacionesPanel;
	}

	@AutoGenerated
	private VerticalLayout buildOperacionesLayout() {
		// common part: create layout
		operacionesLayout = new VerticalLayout();
		operacionesLayout.setImmediate(false);
		operacionesLayout.setWidth("100.0%");
		operacionesLayout.setHeight("100.0%");
		operacionesLayout.setMargin(false);
		operacionesLayout.setSpacing(true);
		
		// Filters
		operacionesLayout.addComponent(opFilterLayout);
		// operacionesTable
		//operacionesTable = new OperacionesTable();
		operacionesTable.setImmediate(false);
		operacionesTable.setWidth("100.0%");
		operacionesTable.setHeight("-1px");
		operacionesLayout.addComponent(operacionesTable);
		operacionesLayout.setComponentAlignment(operacionesTable,
				new Alignment(48));
		
		return operacionesLayout;
	}

}
