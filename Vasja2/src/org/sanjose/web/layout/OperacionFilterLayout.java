package org.sanjose.web.layout;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextField;

public class OperacionFilterLayout extends CustomComponent {

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private Button removeFilter;
	@AutoGenerated
	private TextField detalleFilter;
	@AutoGenerated
	private ComboBox bancoFilter;
	@AutoGenerated
	private ComboBox tipoFilter;
	@AutoGenerated
	private ComboBox isPenFilter;

	@AutoGenerated
	private ComboBox beneficiarioFilter;
	@AutoGenerated
	private ComboBox centroCostoFilter;
	@AutoGenerated
	private ComboBox lugarGastoFilter;
	@AutoGenerated
	private ComboBox cuentaContableFilter;
	@AutoGenerated
	private ComboBox rubroProyectoFilter;
	@AutoGenerated
	private ComboBox rubroInstitucionalFilter;
	@AutoGenerated
	private TextField descripcionFilter;
	@AutoGenerated
	private PopupDateField fechaMax;
	@AutoGenerated
	private PopupDateField fechaMin;
	@AutoGenerated
	private ComboBox isCargoFilter;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public HorizontalLayout getMainLayout() {
		return mainLayout;
	}

	public TextField getDetalleFilter() {
		return detalleFilter;
	}

	public ComboBox getCentroCostoFilter() {
		return centroCostoFilter;
	}
	
	public ComboBox getLugarGastoFilter() {
		return lugarGastoFilter;
	}

	public ComboBox getBeneficiarioFilter() {
		return beneficiarioFilter;
	}
	
	public Button getRemoveFilter() {
		return removeFilter;
	}

	public void setRemoveFilter(Button removeFilter) {
		this.removeFilter = removeFilter;
	}
	
	public ComboBox getIsPenFilter() {
		return isPenFilter;
	}

	public void setIsPenFilter(ComboBox isPenFilter) {
		this.isPenFilter = isPenFilter;
	}

	public ComboBox getIsCargoFilter() {
		return isCargoFilter;
	}

	public void setIsCargoFilter(ComboBox isCargoFilter) {
		this.isCargoFilter = isCargoFilter;
	}

	public PopupDateField getFechaMax() {
		return fechaMax;
	}

	public void setFechaMax(PopupDateField fechaMax) {
		this.fechaMax = fechaMax;
	}

	public PopupDateField getFechaMin() {
		return fechaMin;
	}

	public void setFechaMin(PopupDateField fechaMin) {
		this.fechaMin = fechaMin;
	}

	public ComboBox getBancoFilter() {
		return bancoFilter;
	}

	public void setBancoFilter(ComboBox bancoFilter) {
		this.bancoFilter = bancoFilter;
	}

	public TextField getDescripcionFilter() {
		return descripcionFilter;
	}

	public void setDescripcionFilter(TextField descripcionFilter) {
		this.descripcionFilter = descripcionFilter;
	}

	
	public ComboBox getCuentaContableFilter() {
		return cuentaContableFilter;
	}

	public void setCuentaContableFilter(ComboBox cuentaContableFilter) {
		this.cuentaContableFilter = cuentaContableFilter;
	}

	public ComboBox getRubroProyectoFilter() {
		return rubroProyectoFilter;
	}

	public void setRubroProyectoFilter(ComboBox rubroProyectoFilter) {
		this.rubroProyectoFilter = rubroProyectoFilter;
	}

	public ComboBox getRubroInstitucionalFilter() {
		return rubroInstitucionalFilter;
	}

	public void setRubroInstitucionalFilter(ComboBox rubroInstitucionalFilter) {
		this.rubroInstitucionalFilter = rubroInstitucionalFilter;
	}

	public void setBeneficiarioFilter(ComboBox beneficiarioFilter) {
		this.beneficiarioFilter = beneficiarioFilter;
	}

	public void setCentroCostoFilter(ComboBox centroCostoFilter) {
		this.centroCostoFilter = centroCostoFilter;
	}

	public void setLugarGastoFilter(ComboBox lugarGastoFilter) {
		this.lugarGastoFilter = lugarGastoFilter;
	}

	
	public ComboBox getTipoFilter() {
		return tipoFilter;
	}

	public void setTipoFilter(ComboBox tipoFilter) {
		this.tipoFilter = tipoFilter;
	}

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public OperacionFilterLayout() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("24px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("24px");
		
		// isCargoFilter
		isCargoFilter = new ComboBox();
		isCargoFilter.setImmediate(false);
		isCargoFilter.setWidth("8.0em");
		isCargoFilter.setHeight("-1px");
		mainLayout.addComponent(isCargoFilter);
		
		// fechaMin
		fechaMin = new PopupDateField();
		fechaMin.setImmediate(false);
		fechaMin.setWidth("8.0em");
		fechaMin.setHeight("-1px");
		fechaMin.setInvalidAllowed(false);
		mainLayout.addComponent(fechaMin);
		
		// fechaMax
		fechaMax = new PopupDateField();
		fechaMax.setImmediate(false);
		fechaMax.setWidth("8.0em");
		fechaMax.setHeight("-1px");
		fechaMax.setInvalidAllowed(false);
		mainLayout.addComponent(fechaMax);
		
		// descripcionFilter
		descripcionFilter = new TextField();
		descripcionFilter.setImmediate(false);
		descripcionFilter.setWidth("8.0em");
		descripcionFilter.setHeight("-1px");
		descripcionFilter.setSecret(false);
		mainLayout.addComponent(descripcionFilter);
		
		// centroCostoFilter
		centroCostoFilter = new ComboBox();
		centroCostoFilter.setImmediate(false);
		centroCostoFilter.setWidth("8.0em");
		centroCostoFilter.setHeight("-1px");
		mainLayout.addComponent(centroCostoFilter);
		
		// lugarGastoFilter
		lugarGastoFilter = new ComboBox();
		lugarGastoFilter.setImmediate(false);
		lugarGastoFilter.setWidth("8.0em");
		lugarGastoFilter.setHeight("-1px");
		mainLayout.addComponent(lugarGastoFilter);

		// cunetaContable
		cuentaContableFilter = new ComboBox();
		cuentaContableFilter .setImmediate(false);
		cuentaContableFilter .setWidth("8.0em");
		cuentaContableFilter .setHeight("-1px");
		mainLayout.addComponent(cuentaContableFilter);
		
		// rubroProyecto
		rubroProyectoFilter = new ComboBox();
		rubroProyectoFilter.setImmediate(false);
		rubroProyectoFilter.setWidth("8.0em");
		rubroProyectoFilter.setHeight("-1px");
		mainLayout.addComponent(rubroProyectoFilter);
		
		// rubroInstitucional
		rubroInstitucionalFilter = new ComboBox();
		rubroInstitucionalFilter.setImmediate(false);
		rubroInstitucionalFilter.setWidth("8.0em");
		rubroInstitucionalFilter.setHeight("-1px");
		mainLayout.addComponent(rubroInstitucionalFilter);
		
		// beneficiarioFilter
		beneficiarioFilter = new ComboBox();
		beneficiarioFilter.setImmediate(false);
		beneficiarioFilter.setWidth("8.0em");
		beneficiarioFilter.setHeight("-1px");
		mainLayout.addComponent(beneficiarioFilter);
		
		// isPenFilter
		isPenFilter = new ComboBox();
		isPenFilter.setImmediate(false);
		isPenFilter.setWidth("8.0em");
		isPenFilter.setHeight("-1px");
		mainLayout.addComponent(isPenFilter);
		
		// tipoFilter
		tipoFilter = new ComboBox();
		tipoFilter.setImmediate(false);
		tipoFilter.setWidth("8.0em");
		tipoFilter.setHeight("-1px");
		mainLayout.addComponent(tipoFilter);
		
		// bancoFilter
		bancoFilter = new ComboBox();
		bancoFilter.setImmediate(false);
		bancoFilter.setWidth("8.0em");
		bancoFilter.setHeight("-1px");
		mainLayout.addComponent(bancoFilter);
		
		// detalleFilter
		detalleFilter = new TextField();
		detalleFilter.setImmediate(false);
		detalleFilter.setWidth("8.0em");
		detalleFilter.setHeight("-1px");
		detalleFilter.setSecret(false);
		mainLayout.addComponent(detalleFilter);
		
		// removeFilter
		removeFilter = new Button();
		removeFilter.setCaption("Eliminar filtros");
		removeFilter.setImmediate(true);
		removeFilter.setWidth("9.0em");
		removeFilter.setHeight("-1px");
		mainLayout.addComponent(removeFilter);
		
		return mainLayout;
	}

}
